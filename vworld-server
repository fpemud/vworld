#!/usr/bin/python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

import os
import sys
import argparse
import shutil
import logging
from gi.repository import GLib
curDir = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.join(curDir, "src"))
from util import util
from param import Param
from api_control_dbus import DbusMainObject
from api_control_web import WebMainObject
from api_business import PyroMainObject


def getArgParser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--no-daemon", action="store_true", help="Do not daemonize.")

    parser.add_argument("--pyro", help="Set the <address:port> on which vworl-server uses for PYRO communication.")
    parser.add_argument("--http", help="Set the <address:port> on which vworl-server uses for HTTP controler interface.")

    parser.add_argument("--vardir", help="Set var directory, defaults to /var/vworld.")
    parser.add_argument("--rundir", help="Set run directory, defaults to /run/vworld.")
    parser.add_argument("--logdir", help="Set log directory, defaults to /var/log/vworld.")
    util.argParserAddLogLevelArgument(parser, "log_level")

    return parser

##########################################################################

param = Param()
try:
    args = getArgParser().parse_args()
    if args.vardir is not None and args.rundir is not None and args.logdir is not None:
        param.varDir = args.vardir
        param.runDir = args.rundir
        param.logDir = args.logdir
    else:
        if args.vardir is not None or args.rundir is not None or args.logdir is not None:
            raise Exception("--vardir, --rundir and --logdir must be specified simutaneously")
    if args.no_daemon is not None:
        param.daemonize = False
    if args.pyro is not None:
        r = args.pyro.split(":")
        if len(r) != 2:
            raise Exception("--pyro should have format <address:port>")
        if not util.is_ipaddr(r[0]):
            raise Exception("--pyro should have format <address:port>")
        if not util.is_int(r[1]):
            raise Exception("--pyro should have format <address:port>")
        param.pyroAddr = r[0]
        param.pyroPort = int(r[1])
    if args.http is not None:
        r = args.http.split(":")
        if len(r) != 2:
            raise Exception("--http should have format <address:port>")
        if not util.is_ipaddr(r[0]):
            raise Exception("--http should have format <address:port>")
        if not util.is_int(r[1]):
            raise Exception("--http should have format <address:port>")
        param.httpAddr = r[0]
        param.httpPort = int(r[1])
    if args.log_level is not None:
        param.logLevel = args.log_level

    util.initLogger(param.daemonize, param.logFile, param.logLevel)

    # logging.info("Open world database in %s."%(param.worldDbDir))
    # if not os.path.exists(param.worldDbDir):
    #    os.makedirs(param.worldDbDir)
    # param.worldDb = WorldDatabase(param.worldDbDir)

    logging.info("Publish dbus control interface.")
    param.dbusServer = util.DbusServer()
    param.dbusMainObject = DbusMainObject(param)
    param.dbusServer.register(param.dbusMainObject)

    logging.info("Publish web control interface.")
    param.httpServer = util.HttpServer(param.httpAddr, param.httpPort)
    param.webMainObject = WebMainObject(param)
    param.httpServer.addHandler("/", param.webMainObject)

    logging.info("Publish business interface.")
    param.pyroServer = util.PyroServer(param.pyroAddr, param.pyroPort)
    param.pyroMainObject = PyroMainObject(param)
    param.pyroServer.register("mainobj", param.pyroMainObject)

    logging.info("Main loop starts.")
    param.mainloop = GLib.MainLoop()
    param.httpServer.attach(param.mainloop)
    param.pyroServer.attach(param.mainloop)
    param.mainloop.run()

    logging.info("Main loop exits.")
finally:
    if param.worldDb is not None:
        param.worldDb.close()
    if os.path.exists(param.runDir):
        shutil.rmtree(param.runDir)
    logging.shutdown()
