#!/usr/bin/python3
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-

import os
import sys
import argparse
import shutil
import logging
sys.path.append(os.path.dirname(__file__))
from gi.repository import GLib
from util import util
from util import pyro
from param import Param
from world_db import WorldDatabase
from data_source import DataSource
from service import ServiceObject

def getArgParser():
	parser = argparse.ArgumentParser()
	parser.add_argument("--rundir", required=True)
	parser.add_argument("--vardir", required=True)
	util.argParserAddLogLevelArgument(parser, "log_level")
	return parser

################################################################################

param = Param()
try:
	args = getArgParser().parse_args()
	param.rootDir = os.path.dirname(__file__)
	param.varDir = args.vardir
	param.runDir = args.rundir
	param.logLevel = args.log_level
	
	util.initLogger(param.logFile, param.logLevel)

	logging.info("Open world database in %s."%(param.worldDbDir))
	if not os.path.exists(param.worldDbDir):
		os.makedirs(param.worldDbDir)
	param.worldDb = WorldDatabase(param.worldDbDir)

	logging.info("Create business objects.")
	param.dataSource = DataSource()
	param.pyroServer = pyro.PyroServer()
    param.dbusMainObject = DbusMainObject(param)

	logging.info("Create mainloop object.")
    DBusGMainLoop(set_as_default=True)
	param.mainloop = GLib.MainLoop()

	logging.info("Register remote object as %s."%(param.pubFile))
	if not os.path.exists(os.path.dirname(param.pubFile)):
		os.makedirs(os.path.dirname(param.pubFile))
	param.pyroServer.register(ServiceObject(param), param.pubFile)

	logging.info("Main loop starts.")
	#param.dataSource.attach(param.mainloop)
	param.pyroServer.attach(param.mainloop)
	param.mainloop.run()

	logging.info("Main loop exits.")
finally:
	if param.worldDb is not None:
		param.worldDb.close()
	if os.path.exists(os.path.join(param.runDir, param.moduleName)):
		shutil.rmtree(os.path.join(param.runDir, param.moduleName))
	logging.shutdown()

